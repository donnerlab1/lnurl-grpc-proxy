// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package lnurl

import (
	go_lnurl "github.com/fiatjaf/go-lnurl"

	mock "github.com/stretchr/testify/mock"
)

// WithdrawerMock is an autogenerated mock type for the Withdrawer type
type WithdrawerMock struct {
	mock.Mock
}

// AddWithdrawRequest provides a mock function with given fields: withdrawId, receiver, params
func (_m *WithdrawerMock) AddWithdrawRequest(withdrawId string, receiver InvoicePayer, params *WithdrawParams) (string, error) {
	ret := _m.Called(withdrawId, receiver, params)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, InvoicePayer, *WithdrawParams) string); ok {
		r0 = rf(withdrawId, receiver, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, InvoicePayer, *WithdrawParams) error); ok {
		r1 = rf(withdrawId, receiver, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForwardInvoice provides a mock function with given fields: withdrawId, invoice
func (_m *WithdrawerMock) ForwardInvoice(withdrawId string, invoice string) *go_lnurl.LNURLErrorResponse {
	ret := _m.Called(withdrawId, invoice)

	var r0 *go_lnurl.LNURLErrorResponse
	if rf, ok := ret.Get(0).(func(string, string) *go_lnurl.LNURLErrorResponse); ok {
		r0 = rf(withdrawId, invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_lnurl.LNURLErrorResponse)
		}
	}

	return r0
}

// WithdrawRequest provides a mock function with given fields: withdrawId
func (_m *WithdrawerMock) WithdrawRequest(withdrawId string) (*go_lnurl.LNURLWithdrawResponse, *go_lnurl.LNURLErrorResponse) {
	ret := _m.Called(withdrawId)

	var r0 *go_lnurl.LNURLWithdrawResponse
	if rf, ok := ret.Get(0).(func(string) *go_lnurl.LNURLWithdrawResponse); ok {
		r0 = rf(withdrawId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_lnurl.LNURLWithdrawResponse)
		}
	}

	var r1 *go_lnurl.LNURLErrorResponse
	if rf, ok := ret.Get(1).(func(string) *go_lnurl.LNURLErrorResponse); ok {
		r1 = rf(withdrawId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*go_lnurl.LNURLErrorResponse)
		}
	}

	return r0, r1
}
